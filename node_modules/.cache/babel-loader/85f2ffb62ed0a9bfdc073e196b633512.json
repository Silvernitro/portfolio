{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Documents/Github/portfolio/portfolio/src/sections/NavBar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport styles from '../styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NavBar = ({\n  sections\n}) => {\n  _s();\n\n  const navBarRef = useRef(null);\n  const [activeSection, setActiveSection] = useState(''); // helper fxn to get runtime dimensions of a DOM node\n\n  const getDimensions = ref => {\n    const {\n      height\n    } = ref.current.getBoundingClientRect();\n    const elementTop = ref.current.offsetTop;\n    const elementBottom = elementTop + height;\n    return {\n      height,\n      elementTop,\n      elementBottom\n    };\n  };\n\n  useEffect(() => {\n    const handleScroll = () => {\n      var _Object$entries$find;\n\n      const {\n        height: navBarHeight\n      } = getDimensions(navBarRef);\n      const currScrollY = window.scrollY + navBarHeight; // check which section user is currently in\n\n      const [currSection = ''] = (_Object$entries$find = Object.entries(sections).find(([key, ref]) => {\n        const {\n          elementTop,\n          elementBottom\n        } = getDimensions(ref);\n        return currScrollY >= elementTop && currScrollY < elementBottom;\n      })) !== null && _Object$entries$find !== void 0 ? _Object$entries$find : []; // only set state if section has changed!\n\n      if (currSection !== activeSection) {\n        console.log('setting to: ', currSection);\n        setActiveSection(currSection);\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, [activeSection]);\n\n  const scrollToSection = ref => {\n    window.scrollTo({\n      // note the offset due to sticky top navbar\n      top: ref.current.offsetTop - navBarRef.current.offsetHeight,\n      behavior: 'smooth'\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    ref: navBarRef,\n    children: [/*#__PURE__*/_jsxDEV(Name, {\n      children: \"Lau Siaw Sam\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NavButtons, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => scrollToSection(sections.experienceRef),\n        isActive: activeSection === 'experienceRef',\n        children: \"EXPERIENCE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => scrollToSection(sections.educationRef),\n        isActive: activeSection === 'educationRef',\n        children: \"EDUCATION\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => scrollToSection(sections.skillsRef),\n        isActive: activeSection === 'skillsRef',\n        children: \"SKILLS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => scrollToSection(sections.projectsRef),\n        isActive: activeSection === 'projectsRef',\n        children: \"PROJECTS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NavBar, \"YXAhc4ipNlv4Z58N7xT53TVqVQE=\");\n\n_c = NavBar;\nexport default NavBar;\nconst Container = styled.header`\n  height: 50px;\n  padding: 10px 30px 10px 50px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: sticky;\n  top: 0;\n  background-color: white;\n`;\n_c2 = Container;\nconst Name = styled.div`\n  display: flex;\n  align-items: center;\n\n  font-size: 30px;\n  color: ${styles.PRI_COLOR}\n`;\n_c3 = Name;\nconst NavButtons = styled.div`\n  display: flex;\n`;\n_c4 = NavButtons;\nconst Button = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 10px 30px;\n\n  font-size: 14px;\n  color: ${({\n  isActive\n}) => isActive ? styles.ACTIVE_SECTION_COLOR : styles.PRI_COLOR};\n  cursor: pointer;\n\n  &:hover {\n    color: ${styles.ACTIVE_SECTION_COLOR};\n  }\n  transition: color 0.2s;\n`;\n_c5 = Button;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"NavBar\");\n$RefreshReg$(_c2, \"Container\");\n$RefreshReg$(_c3, \"Name\");\n$RefreshReg$(_c4, \"NavButtons\");\n$RefreshReg$(_c5, \"Button\");","map":{"version":3,"sources":["/Users/sam/Documents/Github/portfolio/portfolio/src/sections/NavBar.js"],"names":["React","useState","useEffect","useRef","styled","styles","NavBar","sections","navBarRef","activeSection","setActiveSection","getDimensions","ref","height","current","getBoundingClientRect","elementTop","offsetTop","elementBottom","handleScroll","navBarHeight","currScrollY","window","scrollY","currSection","Object","entries","find","key","console","log","addEventListener","removeEventListener","scrollToSection","scrollTo","top","offsetHeight","behavior","experienceRef","educationRef","skillsRef","projectsRef","Container","header","Name","div","PRI_COLOR","NavButtons","Button","isActive","ACTIVE_SECTION_COLOR"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport styles from '../styles'\n\nconst NavBar = ({ sections }) => {\n  const navBarRef = useRef(null)\n  const [activeSection, setActiveSection] = useState('')\n\n  // helper fxn to get runtime dimensions of a DOM node\n  const getDimensions = (ref) => {\n    const { height } = ref.current.getBoundingClientRect()\n    const elementTop = ref.current.offsetTop\n    const elementBottom = elementTop + height\n\n    return {\n      height,\n      elementTop,\n      elementBottom,\n    }\n  }\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const { height: navBarHeight } = getDimensions(navBarRef)\n      const currScrollY = window.scrollY + navBarHeight\n\n      // check which section user is currently in\n      const [currSection = ''] = Object.entries(sections).find(([key, ref]) => {\n        const { elementTop, elementBottom } = getDimensions(ref)\n        return currScrollY >= elementTop && currScrollY < elementBottom\n      }) ?? []\n\n      // only set state if section has changed!\n      if (currSection !== activeSection) {\n        console.log('setting to: ', currSection)\n        setActiveSection(currSection)\n      }\n    }\n\n    window.addEventListener('scroll', handleScroll)\n\n    return () => {\n      window.removeEventListener('scroll', handleScroll)\n    }\n  }, [activeSection])\n\n  const scrollToSection = (ref) => {\n    window.scrollTo({\n      // note the offset due to sticky top navbar\n      top: ref.current.offsetTop - navBarRef.current.offsetHeight,\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container ref={navBarRef}>\n      <Name>\n        Lau Siaw Sam\n      </Name>\n      <NavButtons>\n        <Button\n          onClick={() => scrollToSection(sections.experienceRef)}\n          isActive={activeSection === 'experienceRef'}\n        >\n          EXPERIENCE\n        </Button>\n        <Button\n          onClick={() => scrollToSection(sections.educationRef)}\n          isActive={activeSection === 'educationRef'}\n        >\n          EDUCATION\n        </Button>\n        <Button\n          onClick={() => scrollToSection(sections.skillsRef)}\n          isActive={activeSection === 'skillsRef'}\n        >\n          SKILLS\n        </Button>\n        <Button\n          onClick={() => scrollToSection(sections.projectsRef)}\n          isActive={activeSection === 'projectsRef'}\n        >\n          PROJECTS\n        </Button>\n      </NavButtons>\n    </Container>\n  )\n}\n\nexport default NavBar\n\nconst Container = styled.header`\n  height: 50px;\n  padding: 10px 30px 10px 50px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  position: sticky;\n  top: 0;\n  background-color: white;\n`\n\nconst Name = styled.div`\n  display: flex;\n  align-items: center;\n\n  font-size: 30px;\n  color: ${styles.PRI_COLOR}\n`\n\nconst NavButtons = styled.div`\n  display: flex;\n`\n\nconst Button = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 10px 30px;\n\n  font-size: 14px;\n  color: ${({ isActive }) => (isActive ? styles.ACTIVE_SECTION_COLOR : styles.PRI_COLOR)};\n  cursor: pointer;\n\n  &:hover {\n    color: ${styles.ACTIVE_SECTION_COLOR};\n  }\n  transition: color 0.2s;\n`\n"]},"metadata":{},"sourceType":"module"}